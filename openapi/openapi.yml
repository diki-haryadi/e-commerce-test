openapi: 3.0.3
info:
  title: E-Commerce API
  description: API documentation for E-Commerce Microservices
  version: 1.0.0

servers:
  - url: http://localhost:8080/api/v1
    description: Local Development

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SignUpRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        name:
          type: string

    SignInRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          example: "Bearer"

    UserProfile:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string

    CheckoutRequest:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: string
              quantity:
                type: integer

    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
        description:
          type: string

    Shop:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    Warehouse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        location:
          type: string
        status:
          type: string
          enum: [active, inactive]

    Stock:
      type: object
      properties:
        product_id:
          type: string
        quantity:
          type: integer

paths:
  /auth/signup:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/signin:
    post:
      summary: Login with existing credentials
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/refresh:
    post:
      summary: Refresh access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /me:
    get:
      summary: Get user profile
      tags: [User]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /orders/checkout:
    post:
      summary: Create a new order
      tags: [Orders]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
      responses:
        '201':
          description: Order created successfully

  /product:
    get:
      summary: Get all products
      tags: [Products]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /product/{id}:
    get:
      summary: Get product by ID
      tags: [Products]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /shop:
    post:
      summary: Create a new shop
      tags: [Shops]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shop'
      responses:
        '201':
          description: Shop created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'

  /shop/{id}/warehouses:
    get:
      summary: Get shop warehouses
      tags: [Shops]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of warehouses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Warehouse'

  /warehouse:
    post:
      summary: Create a new warehouse
      tags: [Warehouses]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
      responses:
        '201':
          description: Warehouse created successfully

  /warehouse/{id}/status:
    patch:
      summary: Update warehouse status
      tags: [Warehouses]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [active, inactive]
      responses:
        '200':
          description: Warehouse status updated successfully

  /warehouse/transfer:
    post:
      summary: Transfer stock between warehouses
      tags: [Warehouses]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                source_warehouse_id:
                  type: string
                destination_warehouse_id:
                  type: string
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      product_id:
                        type: string
                      quantity:
                        type: integer
      responses:
        '200':
          description: Stock transferred successfully

  /warehouse/{id}/stock:
    get:
      summary: Get warehouse stock
      tags: [Warehouses]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Warehouse stock details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stock'